/* Copyright (C) 2010 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.google.gson;
public final class MixedStreamTest_testWriteLenient_1000 extends junit.framework.TestCase {
    private static final com.google.gson.MixedStreamTest_testWriteLenient_1000.Car BLUE_MUSTANG = new com.google.gson.MixedStreamTest_testWriteLenient_1000.Car("mustang", 0xff);

    private static final com.google.gson.MixedStreamTest_testWriteLenient_1000.Car BLACK_BMW = new com.google.gson.MixedStreamTest_testWriteLenient_1000.Car("bmw", 0x0);

    private static final com.google.gson.MixedStreamTest_testWriteLenient_1000.Car RED_MIATA = new com.google.gson.MixedStreamTest_testWriteLenient_1000.Car("miata", 0xff0000);

    private static final java.lang.String CARS_JSON = "[\n" + (((((((((((("  {\n" + "    \"name\": \"mustang\",\n") + "    \"color\": 255\n") + "  },\n") + "  {\n") + "    \"name\": \"bmw\",\n") + "    \"color\": 0\n") + "  },\n") + "  {\n") + "    \"name\": \"miata\",\n") + "    \"color\": 16711680\n") + "  }\n") + "]");

    public void testWriteLenient_999() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_998() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_997() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_996() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_995() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_994() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_993() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_992() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_991() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_990() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_989() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_988() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_987() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_986() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_985() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_984() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_983() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_982() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_981() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_980() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_979() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_978() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_977() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_976() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_975() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_974() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_973() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_972() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_971() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_970() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_969() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_968() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_967() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_966() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_965() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_964() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_963() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_962() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_961() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_960() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_959() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_958() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_957() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_956() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_955() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_954() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_953() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_952() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_951() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_950() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_949() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_948() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_947() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_946() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_945() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_944() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_943() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_942() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_941() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_940() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_939() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_938() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_937() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_936() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_935() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_934() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_933() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_932() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_931() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_930() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_929() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_928() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_927() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_926() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_925() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_924() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_923() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_922() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_921() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_920() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_919() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_918() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_917() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_916() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_915() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_914() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_913() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_912() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_911() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_910() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_909() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_908() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_907() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_906() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_905() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_904() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_903() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_902() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_901() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_900() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_899() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_898() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_897() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_896() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_895() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_894() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_893() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_892() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_891() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_890() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_889() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_888() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_887() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_886() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_885() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_884() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_883() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_882() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_881() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_880() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_879() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_878() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_877() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_876() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_875() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_874() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_873() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_872() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_871() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_870() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_869() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_868() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_867() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_866() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_865() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_864() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_863() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_862() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_861() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_860() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_859() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_858() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_857() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_856() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_855() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_854() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_853() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_852() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_851() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_850() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_849() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_848() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_847() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_846() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_845() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_844() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_843() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_842() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_841() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_840() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_839() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_838() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_837() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_836() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_835() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_834() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_833() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_832() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_831() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_830() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_829() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_828() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_827() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_826() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_825() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_824() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_823() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_822() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_821() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_820() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_819() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_818() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_817() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_816() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_815() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_814() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_813() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_812() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_811() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_810() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_809() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_808() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_807() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_806() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_805() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_804() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_803() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_802() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_801() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_800() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_799() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_798() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_797() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_796() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_795() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_794() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_793() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_792() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_791() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_790() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_789() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_788() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_787() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_786() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_785() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_784() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_783() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_782() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_781() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_780() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_779() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_778() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_777() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_776() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_775() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_774() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_773() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_772() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_771() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_770() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_769() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_768() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_767() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_766() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_765() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_764() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_763() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_762() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_761() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_760() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_759() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_758() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_757() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_756() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_755() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_754() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_753() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_752() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_751() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_750() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_749() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_748() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_747() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_746() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_745() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_744() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_743() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_742() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_741() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_740() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_739() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_738() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_737() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_736() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_735() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_734() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_733() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_732() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_731() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_730() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_729() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_728() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_727() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_726() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_725() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_724() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_723() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_722() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_721() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_720() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_719() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_718() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_717() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_716() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_715() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_714() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_713() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_712() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_711() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_710() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_709() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_708() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_707() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_706() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_705() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_704() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_703() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_702() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_701() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_700() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_699() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_698() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_697() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_696() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_695() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_694() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_693() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_692() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_691() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_690() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_689() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_688() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_687() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_686() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_685() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_684() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_683() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_682() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_681() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_680() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_679() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_678() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_677() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_676() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_675() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_674() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_673() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_672() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_671() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_670() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_669() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_668() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_667() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_666() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_665() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_664() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_663() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_662() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_661() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_660() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_659() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_658() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_657() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_656() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_655() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_654() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_653() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_652() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_651() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_650() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_649() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_648() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_647() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_646() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_645() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_644() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_643() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_642() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_641() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_640() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_639() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_638() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_637() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_636() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_635() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_634() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_633() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_632() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_631() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_630() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_629() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_628() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_627() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_626() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_625() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_624() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_623() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_622() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_621() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_620() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_619() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_618() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_617() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_616() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_615() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_614() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_613() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_612() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_611() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_610() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_609() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_608() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_607() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_606() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_605() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_604() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_603() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_602() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_601() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_600() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_599() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_598() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_597() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_596() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_595() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_594() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_593() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_592() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_591() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_590() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_589() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_588() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_587() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_586() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_585() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_584() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_583() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_582() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_581() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_580() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_579() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_578() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_577() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_576() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_575() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_574() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_573() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_572() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_571() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_570() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_569() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_568() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_567() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_566() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_565() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_564() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_563() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_562() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_561() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_560() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_559() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_558() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_557() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_556() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_555() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_554() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_553() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_552() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_551() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_550() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_549() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_548() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_547() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_546() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_545() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_544() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_543() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_542() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_541() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_540() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_539() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_538() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_537() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_536() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_535() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_534() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_533() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_532() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_531() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_530() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_529() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_528() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_527() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_526() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_525() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_524() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_523() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_522() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_521() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_520() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_519() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_518() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_517() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_516() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_515() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_514() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_513() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_512() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_511() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_510() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_509() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_508() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_507() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_506() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_505() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_504() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_503() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_502() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_501() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_500() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_499() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_498() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_497() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_496() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_495() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_494() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_493() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_492() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_491() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_490() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_489() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_488() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_487() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_486() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_485() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_484() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_483() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_482() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_481() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_480() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_479() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_478() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_477() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_476() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_475() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_474() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_473() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_472() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_471() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_470() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_469() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_468() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_467() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_466() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_465() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_464() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_463() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_462() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_461() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_460() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_459() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_458() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_457() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_456() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_455() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_454() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_453() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_452() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_451() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_450() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_449() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_448() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_447() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_446() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_445() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_444() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_443() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_442() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_441() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_440() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_439() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_438() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_437() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_436() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_435() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_434() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_433() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_432() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_431() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_430() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_429() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_428() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_427() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_426() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_425() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_424() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_423() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_422() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_421() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_420() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_419() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_418() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_417() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_416() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_415() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_414() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_413() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_412() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_411() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_410() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_409() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_408() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_407() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_406() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_405() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_404() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_403() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_402() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_401() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_400() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_399() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_398() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_397() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_396() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_395() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_394() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_393() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_392() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_391() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_390() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_389() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_388() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_387() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_386() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_385() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_384() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_383() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_382() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_381() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_380() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_379() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_378() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_377() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_376() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_375() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_374() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_373() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_372() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_371() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_370() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_369() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_368() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_367() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_366() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_365() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_364() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_363() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_362() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_361() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_360() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_359() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_358() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_357() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_356() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_355() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_354() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_353() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_352() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_351() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_350() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_349() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_348() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_347() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_346() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_345() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_344() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_343() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_342() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_341() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_340() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_339() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_338() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_337() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_336() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_335() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_334() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_333() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_332() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_331() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_330() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_329() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_328() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_327() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_326() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_325() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_324() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_323() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_322() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_321() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_320() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_319() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_318() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_317() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_316() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_315() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_314() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_313() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_312() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_311() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_310() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_309() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_308() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_307() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_306() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_305() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_304() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_303() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_302() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_301() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_300() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_299() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_298() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_297() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_296() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_295() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_294() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_293() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_292() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_291() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_290() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_289() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_288() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_287() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_286() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_285() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_284() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_283() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_282() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_281() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_280() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_279() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_278() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_277() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_276() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_275() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_274() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_273() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_272() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_271() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_270() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_269() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_268() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_267() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_266() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_265() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_264() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_263() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_262() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_261() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_260() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_259() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_258() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_257() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_256() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_255() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_254() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_253() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_252() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_251() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_250() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_249() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_248() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_247() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_246() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_245() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_244() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_243() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_242() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_241() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_240() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_239() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_238() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_237() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_236() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_235() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_234() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_233() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_232() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_231() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_230() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_229() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_228() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_227() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_226() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_225() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_224() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_223() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_222() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_221() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_220() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_219() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_218() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_217() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_216() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_215() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_214() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_213() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_212() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_211() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_210() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_209() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_208() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_207() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_206() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_205() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_204() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_203() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_202() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_201() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_200() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_199() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_198() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_197() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_196() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_195() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_194() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_193() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_192() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_191() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_190() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_189() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_188() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_187() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_186() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_185() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_184() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_183() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_182() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_181() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_180() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_179() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_178() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_177() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_176() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_175() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_174() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_173() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_172() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_171() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_170() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_169() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_168() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_167() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_166() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_165() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_164() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_163() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_162() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_161() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_160() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_159() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_158() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_157() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_156() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_155() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_154() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_153() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_152() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_151() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_150() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_149() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_148() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_147() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_146() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_145() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_144() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_143() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_142() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_141() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_140() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_139() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_138() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_137() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_136() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_135() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_134() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_133() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_132() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_131() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_130() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_129() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_128() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_127() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_126() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_125() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_124() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_123() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_122() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_121() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_120() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_119() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_118() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_117() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_116() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_115() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_114() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_113() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_112() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_111() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_110() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_109() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_108() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_107() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_106() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_105() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_104() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_103() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_102() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_101() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_100() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_99() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_98() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_97() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_96() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_95() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_94() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_93() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_92() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_91() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_90() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_89() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_88() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_87() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_86() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_85() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_84() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_83() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_82() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_81() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_80() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_79() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_78() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_77() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_76() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_75() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_74() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_73() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_72() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_71() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_70() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_69() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_68() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_67() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_66() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_65() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_64() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_63() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_62() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_61() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_60() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_59() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_58() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_57() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_56() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_55() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_54() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_53() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_52() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_51() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_50() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_49() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_48() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_47() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_46() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_45() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_44() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_43() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_42() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_41() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_40() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_39() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_38() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_37() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_36() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_35() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_34() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_33() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_32() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_31() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_30() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_29() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_28() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_27() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_26() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_25() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_24() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_23() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_22() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_21() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_20() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_19() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_18() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_17() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_16() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_15() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_14() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_13() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_12() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_11() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_10() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_9() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_8() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_7() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_6() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_5() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_4() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_3() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_2() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_1() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient_0() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    public void testWriteLenient() {
        java.util.List<java.lang.Double> doubles = java.util.Arrays.asList(java.lang.Double.NaN, java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY, -0.0, 0.5, 0.0);
        java.lang.reflect.Type type = new com.google.gson.reflect.TypeToken<java.util.List<java.lang.Double>>() {}.getType();
        java.io.StringWriter writer = new java.io.StringWriter();
        com.google.gson.stream.JsonWriter jsonWriter = new com.google.gson.stream.JsonWriter(writer);
        new com.google.gson.GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles, type, jsonWriter);
        junit.framework.Assert.assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
        try {
            new com.google.gson.Gson().toJson(doubles, type, new com.google.gson.stream.JsonWriter(new java.io.StringWriter()));
            junit.framework.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    static final class Car {
        java.lang.String name;

        int color;

        Car(java.lang.String name, int color) {
            this.name = name;
            this.color = color;
        }

        // used by Gson
        Car() {
        }

        @java.lang.Override
        public int hashCode() {
            return name.hashCode() ^ color;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object o) {
            return ((o instanceof com.google.gson.MixedStreamTest_testWriteLenient_1000.Car) && ((com.google.gson.MixedStreamTest_testWriteLenient_1000.Car) (o)).name.equals(name)) && (((com.google.gson.MixedStreamTest_testWriteLenient_1000.Car) (o)).color == color);
        }
    }

    public static junit.framework.Test suite() {
        junit.extensions.TestSetup setup = new junit.extensions.TestSetup(new junit.framework.TestSuite(com.google.gson.MixedStreamTest_testWriteLenient_1000.class) {}) {
            protected void setUp() {
                org.powerapi.jjoules.junit4.EnergyTest.beforeTest("com.google.gson.MixedStreamTest", "testWriteLenient");
            }

            protected void tearDown() {
                org.powerapi.jjoules.junit4.EnergyTest.afterTest();
            }
        };
        return setup;
    }
}