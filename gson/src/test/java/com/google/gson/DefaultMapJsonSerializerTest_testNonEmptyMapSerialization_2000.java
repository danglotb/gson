/* Copyright (C) 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.google.gson;
/**
 * Unit test for the default JSON map serialization object located in the
 * {@link DefaultTypeAdapters} class.
 *
 * @author Joel Leitch
 */
public class DefaultMapJsonSerializerTest_testNonEmptyMapSerialization_2000 extends junit.framework.TestCase {
    private com.google.gson.Gson gson = new com.google.gson.Gson();

    public void testNonEmptyMapSerialization_1999() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1998() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1997() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1996() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1995() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1994() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1993() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1992() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1991() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1990() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1989() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1988() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1987() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1986() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1985() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1984() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1983() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1982() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1981() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1980() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1979() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1978() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1977() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1976() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1975() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1974() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1973() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1972() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1971() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1970() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1969() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1968() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1967() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1966() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1965() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1964() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1963() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1962() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1961() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1960() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1959() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1958() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1957() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1956() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1955() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1954() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1953() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1952() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1951() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1950() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1949() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1948() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1947() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1946() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1945() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1944() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1943() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1942() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1941() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1940() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1939() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1938() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1937() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1936() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1935() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1934() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1933() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1932() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1931() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1930() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1929() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1928() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1927() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1926() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1925() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1924() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1923() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1922() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1921() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1920() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1919() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1918() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1917() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1916() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1915() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1914() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1913() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1912() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1911() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1910() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1909() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1908() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1907() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1906() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1905() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1904() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1903() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1902() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1901() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1900() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1899() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1898() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1897() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1896() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1895() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1894() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1893() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1892() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1891() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1890() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1889() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1888() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1887() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1886() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1885() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1884() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1883() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1882() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1881() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1880() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1879() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1878() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1877() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1876() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1875() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1874() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1873() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1872() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1871() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1870() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1869() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1868() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1867() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1866() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1865() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1864() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1863() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1862() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1861() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1860() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1859() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1858() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1857() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1856() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1855() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1854() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1853() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1852() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1851() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1850() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1849() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1848() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1847() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1846() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1845() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1844() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1843() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1842() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1841() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1840() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1839() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1838() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1837() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1836() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1835() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1834() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1833() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1832() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1831() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1830() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1829() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1828() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1827() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1826() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1825() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1824() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1823() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1822() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1821() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1820() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1819() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1818() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1817() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1816() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1815() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1814() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1813() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1812() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1811() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1810() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1809() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1808() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1807() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1806() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1805() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1804() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1803() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1802() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1801() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1800() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1799() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1798() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1797() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1796() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1795() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1794() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1793() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1792() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1791() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1790() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1789() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1788() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1787() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1786() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1785() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1784() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1783() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1782() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1781() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1780() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1779() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1778() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1777() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1776() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1775() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1774() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1773() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1772() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1771() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1770() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1769() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1768() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1767() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1766() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1765() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1764() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1763() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1762() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1761() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1760() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1759() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1758() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1757() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1756() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1755() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1754() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1753() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1752() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1751() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1750() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1749() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1748() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1747() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1746() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1745() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1744() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1743() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1742() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1741() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1740() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1739() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1738() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1737() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1736() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1735() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1734() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1733() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1732() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1731() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1730() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1729() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1728() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1727() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1726() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1725() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1724() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1723() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1722() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1721() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1720() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1719() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1718() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1717() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1716() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1715() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1714() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1713() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1712() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1711() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1710() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1709() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1708() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1707() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1706() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1705() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1704() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1703() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1702() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1701() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1700() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1699() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1698() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1697() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1696() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1695() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1694() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1693() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1692() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1691() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1690() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1689() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1688() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1687() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1686() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1685() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1684() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1683() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1682() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1681() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1680() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1679() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1678() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1677() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1676() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1675() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1674() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1673() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1672() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1671() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1670() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1669() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1668() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1667() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1666() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1665() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1664() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1663() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1662() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1661() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1660() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1659() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1658() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1657() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1656() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1655() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1654() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1653() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1652() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1651() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1650() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1649() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1648() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1647() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1646() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1645() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1644() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1643() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1642() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1641() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1640() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1639() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1638() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1637() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1636() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1635() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1634() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1633() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1632() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1631() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1630() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1629() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1628() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1627() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1626() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1625() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1624() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1623() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1622() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1621() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1620() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1619() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1618() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1617() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1616() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1615() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1614() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1613() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1612() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1611() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1610() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1609() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1608() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1607() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1606() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1605() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1604() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1603() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1602() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1601() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1600() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1599() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1598() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1597() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1596() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1595() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1594() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1593() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1592() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1591() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1590() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1589() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1588() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1587() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1586() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1585() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1584() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1583() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1582() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1581() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1580() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1579() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1578() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1577() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1576() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1575() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1574() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1573() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1572() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1571() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1570() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1569() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1568() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1567() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1566() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1565() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1564() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1563() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1562() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1561() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1560() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1559() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1558() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1557() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1556() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1555() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1554() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1553() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1552() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1551() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1550() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1549() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1548() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1547() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1546() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1545() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1544() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1543() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1542() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1541() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1540() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1539() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1538() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1537() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1536() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1535() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1534() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1533() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1532() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1531() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1530() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1529() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1528() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1527() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1526() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1525() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1524() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1523() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1522() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1521() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1520() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1519() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1518() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1517() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1516() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1515() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1514() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1513() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1512() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1511() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1510() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1509() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1508() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1507() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1506() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1505() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1504() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1503() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1502() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1501() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1500() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1499() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1498() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1497() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1496() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1495() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1494() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1493() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1492() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1491() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1490() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1489() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1488() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1487() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1486() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1485() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1484() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1483() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1482() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1481() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1480() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1479() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1478() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1477() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1476() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1475() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1474() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1473() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1472() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1471() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1470() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1469() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1468() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1467() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1466() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1465() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1464() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1463() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1462() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1461() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1460() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1459() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1458() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1457() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1456() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1455() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1454() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1453() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1452() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1451() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1450() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1449() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1448() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1447() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1446() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1445() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1444() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1443() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1442() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1441() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1440() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1439() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1438() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1437() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1436() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1435() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1434() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1433() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1432() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1431() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1430() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1429() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1428() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1427() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1426() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1425() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1424() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1423() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1422() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1421() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1420() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1419() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1418() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1417() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1416() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1415() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1414() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1413() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1412() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1411() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1410() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1409() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1408() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1407() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1406() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1405() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1404() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1403() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1402() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1401() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1400() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1399() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1398() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1397() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1396() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1395() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1394() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1393() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1392() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1391() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1390() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1389() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1388() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1387() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1386() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1385() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1384() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1383() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1382() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1381() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1380() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1379() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1378() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1377() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1376() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1375() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1374() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1373() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1372() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1371() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1370() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1369() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1368() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1367() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1366() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1365() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1364() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1363() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1362() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1361() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1360() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1359() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1358() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1357() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1356() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1355() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1354() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1353() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1352() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1351() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1350() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1349() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1348() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1347() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1346() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1345() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1344() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1343() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1342() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1341() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1340() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1339() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1338() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1337() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1336() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1335() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1334() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1333() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1332() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1331() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1330() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1329() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1328() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1327() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1326() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1325() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1324() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1323() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1322() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1321() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1320() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1319() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1318() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1317() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1316() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1315() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1314() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1313() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1312() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1311() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1310() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1309() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1308() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1307() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1306() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1305() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1304() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1303() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1302() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1301() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1300() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1299() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1298() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1297() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1296() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1295() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1294() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1293() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1292() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1291() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1290() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1289() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1288() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1287() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1286() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1285() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1284() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1283() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1282() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1281() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1280() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1279() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1278() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1277() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1276() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1275() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1274() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1273() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1272() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1271() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1270() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1269() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1268() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1267() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1266() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1265() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1264() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1263() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1262() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1261() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1260() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1259() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1258() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1257() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1256() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1255() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1254() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1253() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1252() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1251() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1250() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1249() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1248() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1247() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1246() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1245() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1244() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1243() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1242() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1241() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1240() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1239() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1238() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1237() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1236() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1235() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1234() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1233() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1232() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1231() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1230() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1229() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1228() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1227() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1226() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1225() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1224() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1223() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1222() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1221() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1220() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1219() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1218() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1217() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1216() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1215() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1214() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1213() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1212() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1211() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1210() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1209() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1208() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1207() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1206() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1205() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1204() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1203() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1202() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1201() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1200() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1199() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1198() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1197() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1196() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1195() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1194() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1193() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1192() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1191() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1190() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1189() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1188() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1187() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1186() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1185() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1184() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1183() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1182() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1181() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1180() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1179() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1178() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1177() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1176() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1175() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1174() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1173() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1172() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1171() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1170() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1169() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1168() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1167() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1166() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1165() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1164() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1163() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1162() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1161() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1160() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1159() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1158() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1157() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1156() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1155() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1154() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1153() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1152() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1151() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1150() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1149() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1148() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1147() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1146() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1145() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1144() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1143() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1142() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1141() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1140() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1139() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1138() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1137() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1136() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1135() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1134() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1133() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1132() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1131() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1130() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1129() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1128() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1127() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1126() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1125() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1124() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1123() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1122() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1121() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1120() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1119() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1118() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1117() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1116() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1115() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1114() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1113() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1112() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1111() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1110() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1109() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1108() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1107() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1106() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1105() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1104() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1103() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1102() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1101() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1100() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1099() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1098() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1097() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1096() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1095() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1094() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1093() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1092() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1091() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1090() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1089() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1088() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1087() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1086() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1085() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1084() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1083() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1082() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1081() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1080() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1079() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1078() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1077() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1076() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1075() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1074() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1073() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1072() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1071() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1070() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1069() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1068() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1067() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1066() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1065() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1064() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1063() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1062() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1061() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1060() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1059() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1058() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1057() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1056() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1055() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1054() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1053() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1052() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1051() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1050() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1049() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1048() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1047() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1046() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1045() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1044() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1043() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1042() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1041() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1040() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1039() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1038() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1037() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1036() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1035() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1034() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1033() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1032() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1031() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1030() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1029() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1028() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1027() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1026() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1025() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1024() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1023() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1022() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1021() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1020() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1019() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1018() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1017() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1016() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1015() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1014() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1013() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1012() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1011() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1010() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1009() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1008() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1007() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1006() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1005() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1004() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1003() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1002() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1001() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1000() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_999() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_998() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_997() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_996() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_995() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_994() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_993() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_992() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_991() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_990() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_989() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_988() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_987() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_986() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_985() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_984() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_983() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_982() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_981() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_980() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_979() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_978() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_977() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_976() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_975() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_974() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_973() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_972() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_971() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_970() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_969() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_968() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_967() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_966() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_965() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_964() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_963() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_962() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_961() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_960() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_959() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_958() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_957() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_956() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_955() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_954() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_953() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_952() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_951() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_950() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_949() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_948() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_947() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_946() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_945() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_944() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_943() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_942() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_941() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_940() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_939() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_938() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_937() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_936() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_935() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_934() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_933() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_932() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_931() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_930() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_929() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_928() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_927() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_926() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_925() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_924() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_923() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_922() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_921() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_920() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_919() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_918() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_917() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_916() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_915() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_914() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_913() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_912() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_911() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_910() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_909() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_908() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_907() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_906() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_905() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_904() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_903() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_902() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_901() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_900() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_899() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_898() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_897() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_896() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_895() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_894() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_893() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_892() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_891() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_890() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_889() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_888() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_887() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_886() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_885() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_884() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_883() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_882() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_881() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_880() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_879() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_878() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_877() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_876() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_875() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_874() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_873() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_872() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_871() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_870() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_869() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_868() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_867() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_866() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_865() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_864() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_863() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_862() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_861() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_860() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_859() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_858() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_857() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_856() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_855() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_854() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_853() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_852() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_851() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_850() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_849() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_848() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_847() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_846() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_845() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_844() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_843() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_842() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_841() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_840() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_839() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_838() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_837() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_836() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_835() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_834() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_833() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_832() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_831() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_830() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_829() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_828() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_827() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_826() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_825() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_824() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_823() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_822() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_821() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_820() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_819() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_818() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_817() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_816() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_815() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_814() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_813() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_812() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_811() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_810() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_809() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_808() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_807() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_806() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_805() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_804() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_803() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_802() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_801() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_800() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_799() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_798() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_797() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_796() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_795() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_794() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_793() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_792() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_791() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_790() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_789() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_788() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_787() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_786() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_785() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_784() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_783() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_782() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_781() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_780() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_779() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_778() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_777() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_776() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_775() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_774() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_773() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_772() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_771() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_770() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_769() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_768() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_767() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_766() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_765() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_764() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_763() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_762() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_761() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_760() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_759() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_758() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_757() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_756() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_755() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_754() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_753() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_752() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_751() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_750() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_749() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_748() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_747() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_746() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_745() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_744() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_743() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_742() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_741() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_740() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_739() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_738() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_737() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_736() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_735() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_734() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_733() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_732() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_731() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_730() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_729() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_728() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_727() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_726() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_725() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_724() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_723() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_722() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_721() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_720() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_719() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_718() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_717() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_716() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_715() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_714() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_713() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_712() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_711() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_710() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_709() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_708() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_707() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_706() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_705() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_704() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_703() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_702() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_701() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_700() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_699() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_698() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_697() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_696() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_695() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_694() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_693() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_692() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_691() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_690() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_689() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_688() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_687() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_686() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_685() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_684() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_683() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_682() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_681() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_680() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_679() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_678() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_677() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_676() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_675() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_674() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_673() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_672() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_671() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_670() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_669() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_668() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_667() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_666() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_665() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_664() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_663() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_662() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_661() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_660() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_659() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_658() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_657() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_656() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_655() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_654() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_653() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_652() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_651() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_650() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_649() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_648() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_647() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_646() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_645() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_644() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_643() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_642() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_641() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_640() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_639() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_638() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_637() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_636() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_635() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_634() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_633() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_632() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_631() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_630() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_629() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_628() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_627() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_626() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_625() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_624() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_623() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_622() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_621() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_620() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_619() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_618() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_617() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_616() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_615() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_614() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_613() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_612() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_611() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_610() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_609() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_608() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_607() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_606() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_605() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_604() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_603() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_602() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_601() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_600() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_599() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_598() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_597() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_596() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_595() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_594() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_593() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_592() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_591() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_590() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_589() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_588() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_587() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_586() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_585() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_584() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_583() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_582() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_581() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_580() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_579() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_578() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_577() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_576() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_575() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_574() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_573() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_572() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_571() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_570() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_569() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_568() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_567() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_566() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_565() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_564() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_563() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_562() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_561() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_560() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_559() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_558() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_557() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_556() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_555() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_554() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_553() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_552() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_551() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_550() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_549() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_548() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_547() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_546() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_545() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_544() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_543() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_542() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_541() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_540() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_539() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_538() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_537() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_536() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_535() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_534() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_533() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_532() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_531() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_530() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_529() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_528() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_527() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_526() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_525() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_524() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_523() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_522() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_521() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_520() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_519() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_518() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_517() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_516() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_515() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_514() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_513() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_512() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_511() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_510() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_509() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_508() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_507() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_506() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_505() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_504() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_503() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_502() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_501() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_500() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_499() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_498() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_497() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_496() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_495() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_494() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_493() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_492() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_491() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_490() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_489() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_488() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_487() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_486() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_485() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_484() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_483() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_482() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_481() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_480() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_479() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_478() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_477() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_476() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_475() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_474() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_473() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_472() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_471() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_470() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_469() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_468() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_467() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_466() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_465() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_464() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_463() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_462() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_461() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_460() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_459() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_458() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_457() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_456() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_455() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_454() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_453() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_452() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_451() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_450() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_449() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_448() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_447() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_446() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_445() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_444() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_443() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_442() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_441() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_440() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_439() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_438() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_437() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_436() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_435() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_434() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_433() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_432() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_431() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_430() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_429() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_428() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_427() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_426() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_425() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_424() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_423() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_422() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_421() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_420() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_419() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_418() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_417() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_416() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_415() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_414() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_413() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_412() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_411() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_410() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_409() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_408() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_407() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_406() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_405() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_404() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_403() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_402() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_401() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_400() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_399() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_398() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_397() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_396() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_395() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_394() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_393() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_392() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_391() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_390() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_389() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_388() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_387() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_386() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_385() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_384() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_383() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_382() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_381() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_380() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_379() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_378() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_377() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_376() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_375() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_374() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_373() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_372() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_371() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_370() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_369() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_368() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_367() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_366() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_365() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_364() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_363() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_362() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_361() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_360() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_359() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_358() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_357() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_356() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_355() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_354() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_353() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_352() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_351() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_350() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_349() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_348() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_347() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_346() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_345() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_344() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_343() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_342() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_341() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_340() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_339() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_338() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_337() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_336() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_335() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_334() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_333() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_332() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_331() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_330() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_329() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_328() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_327() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_326() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_325() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_324() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_323() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_322() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_321() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_320() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_319() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_318() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_317() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_316() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_315() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_314() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_313() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_312() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_311() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_310() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_309() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_308() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_307() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_306() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_305() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_304() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_303() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_302() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_301() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_300() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_299() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_298() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_297() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_296() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_295() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_294() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_293() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_292() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_291() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_290() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_289() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_288() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_287() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_286() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_285() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_284() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_283() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_282() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_281() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_280() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_279() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_278() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_277() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_276() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_275() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_274() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_273() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_272() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_271() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_270() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_269() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_268() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_267() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_266() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_265() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_264() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_263() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_262() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_261() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_260() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_259() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_258() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_257() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_256() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_255() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_254() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_253() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_252() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_251() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_250() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_249() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_248() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_247() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_246() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_245() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_244() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_243() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_242() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_241() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_240() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_239() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_238() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_237() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_236() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_235() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_234() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_233() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_232() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_231() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_230() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_229() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_228() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_227() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_226() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_225() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_224() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_223() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_222() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_221() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_220() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_219() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_218() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_217() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_216() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_215() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_214() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_213() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_212() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_211() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_210() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_209() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_208() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_207() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_206() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_205() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_204() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_203() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_202() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_201() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_200() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_199() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_198() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_197() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_196() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_195() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_194() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_193() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_192() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_191() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_190() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_189() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_188() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_187() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_186() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_185() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_184() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_183() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_182() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_181() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_180() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_179() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_178() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_177() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_176() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_175() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_174() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_173() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_172() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_171() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_170() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_169() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_168() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_167() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_166() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_165() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_164() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_163() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_162() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_161() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_160() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_159() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_158() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_157() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_156() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_155() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_154() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_153() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_152() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_151() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_150() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_149() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_148() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_147() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_146() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_145() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_144() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_143() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_142() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_141() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_140() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_139() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_138() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_137() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_136() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_135() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_134() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_133() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_132() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_131() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_130() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_129() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_128() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_127() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_126() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_125() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_124() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_123() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_122() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_121() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_120() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_119() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_118() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_117() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_116() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_115() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_114() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_113() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_112() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_111() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_110() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_109() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_108() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_107() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_106() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_105() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_104() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_103() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_102() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_101() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_100() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_99() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_98() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_97() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_96() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_95() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_94() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_93() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_92() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_91() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_90() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_89() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_88() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_87() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_86() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_85() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_84() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_83() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_82() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_81() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_80() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_79() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_78() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_77() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_76() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_75() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_74() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_73() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_72() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_71() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_70() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_69() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_68() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_67() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_66() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_65() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_64() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_63() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_62() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_61() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_60() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_59() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_58() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_57() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_56() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_55() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_54() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_53() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_52() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_51() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_50() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_49() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_48() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_47() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_46() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_45() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_44() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_43() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_42() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_41() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_40() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_39() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_38() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_37() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_36() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_35() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_34() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_33() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_32() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_31() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_30() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_29() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_28() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_27() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_26() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_25() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_24() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_23() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_22() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_21() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_20() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_19() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_18() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_17() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_16() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_15() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_14() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_13() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_12() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_11() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_10() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_9() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_8() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_7() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_6() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_5() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_4() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_3() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_2() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_1() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization_0() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public void testNonEmptyMapSerialization() {
        java.lang.reflect.Type mapType = new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.String>>() {}.getType();
        java.util.Map<java.lang.String, java.lang.String> myMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        java.lang.String key = "key1";
        myMap.put(key, "value1");
        com.google.gson.Gson gson = new com.google.gson.Gson();
        com.google.gson.JsonElement element = gson.toJsonTree(myMap, mapType);
        junit.framework.Assert.assertTrue(element.isJsonObject());
        com.google.gson.JsonObject mapJsonObject = element.getAsJsonObject();
        junit.framework.Assert.assertTrue(mapJsonObject.has(key));
    }

    public static junit.framework.Test suite() {
        junit.extensions.TestSetup setup = new junit.extensions.TestSetup(new junit.framework.TestSuite(com.google.gson.DefaultMapJsonSerializerTest_testNonEmptyMapSerialization_2000.class) {}) {
            protected void setUp() {
                org.powerapi.jjoules.junit4.EnergyTest.beforeTest("com.google.gson.DefaultMapJsonSerializerTest", "testNonEmptyMapSerialization");
            }

            protected void tearDown() {
                org.powerapi.jjoules.junit4.EnergyTest.afterTest();
            }
        };
        return setup;
    }
}