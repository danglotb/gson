/* Copyright (C) 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.google.gson.functional;
/**
 * Functional tests that do not fall neatly into any of the existing classification.
 *
 * @author Inderjeet Singh
 * @author Joel Leitch
 */
public class UncategorizedTest_testObjectEqualButNotSameSerialization_2000 extends junit.framework.TestCase {
    private com.google.gson.Gson gson = null;

    @java.lang.Override
    protected void setUp() throws java.lang.Exception {
        super.setUp();
        gson = new com.google.gson.Gson();
    }

    public void testObjectEqualButNotSameSerialization_1999() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1998() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1997() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1996() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1995() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1994() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1993() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1992() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1991() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1990() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1989() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1988() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1987() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1986() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1985() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1984() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1983() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1982() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1981() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1980() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1979() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1978() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1977() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1976() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1975() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1974() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1973() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1972() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1971() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1970() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1969() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1968() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1967() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1966() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1965() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1964() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1963() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1962() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1961() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1960() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1959() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1958() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1957() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1956() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1955() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1954() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1953() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1952() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1951() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1950() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1949() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1948() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1947() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1946() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1945() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1944() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1943() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1942() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1941() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1940() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1939() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1938() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1937() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1936() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1935() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1934() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1933() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1932() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1931() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1930() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1929() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1928() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1927() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1926() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1925() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1924() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1923() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1922() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1921() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1920() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1919() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1918() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1917() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1916() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1915() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1914() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1913() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1912() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1911() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1910() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1909() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1908() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1907() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1906() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1905() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1904() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1903() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1902() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1901() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1900() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1899() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1898() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1897() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1896() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1895() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1894() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1893() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1892() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1891() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1890() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1889() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1888() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1887() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1886() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1885() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1884() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1883() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1882() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1881() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1880() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1879() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1878() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1877() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1876() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1875() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1874() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1873() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1872() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1871() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1870() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1869() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1868() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1867() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1866() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1865() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1864() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1863() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1862() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1861() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1860() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1859() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1858() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1857() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1856() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1855() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1854() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1853() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1852() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1851() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1850() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1849() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1848() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1847() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1846() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1845() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1844() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1843() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1842() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1841() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1840() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1839() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1838() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1837() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1836() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1835() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1834() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1833() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1832() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1831() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1830() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1829() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1828() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1827() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1826() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1825() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1824() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1823() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1822() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1821() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1820() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1819() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1818() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1817() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1816() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1815() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1814() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1813() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1812() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1811() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1810() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1809() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1808() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1807() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1806() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1805() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1804() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1803() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1802() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1801() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1800() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1799() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1798() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1797() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1796() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1795() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1794() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1793() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1792() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1791() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1790() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1789() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1788() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1787() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1786() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1785() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1784() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1783() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1782() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1781() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1780() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1779() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1778() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1777() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1776() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1775() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1774() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1773() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1772() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1771() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1770() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1769() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1768() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1767() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1766() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1765() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1764() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1763() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1762() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1761() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1760() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1759() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1758() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1757() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1756() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1755() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1754() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1753() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1752() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1751() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1750() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1749() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1748() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1747() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1746() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1745() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1744() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1743() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1742() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1741() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1740() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1739() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1738() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1737() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1736() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1735() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1734() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1733() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1732() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1731() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1730() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1729() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1728() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1727() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1726() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1725() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1724() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1723() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1722() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1721() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1720() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1719() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1718() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1717() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1716() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1715() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1714() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1713() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1712() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1711() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1710() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1709() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1708() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1707() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1706() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1705() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1704() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1703() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1702() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1701() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1700() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1699() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1698() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1697() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1696() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1695() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1694() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1693() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1692() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1691() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1690() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1689() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1688() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1687() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1686() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1685() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1684() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1683() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1682() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1681() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1680() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1679() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1678() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1677() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1676() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1675() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1674() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1673() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1672() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1671() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1670() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1669() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1668() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1667() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1666() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1665() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1664() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1663() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1662() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1661() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1660() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1659() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1658() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1657() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1656() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1655() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1654() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1653() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1652() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1651() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1650() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1649() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1648() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1647() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1646() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1645() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1644() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1643() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1642() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1641() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1640() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1639() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1638() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1637() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1636() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1635() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1634() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1633() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1632() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1631() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1630() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1629() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1628() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1627() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1626() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1625() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1624() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1623() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1622() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1621() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1620() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1619() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1618() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1617() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1616() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1615() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1614() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1613() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1612() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1611() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1610() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1609() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1608() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1607() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1606() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1605() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1604() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1603() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1602() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1601() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1600() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1599() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1598() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1597() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1596() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1595() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1594() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1593() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1592() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1591() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1590() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1589() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1588() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1587() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1586() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1585() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1584() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1583() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1582() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1581() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1580() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1579() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1578() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1577() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1576() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1575() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1574() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1573() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1572() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1571() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1570() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1569() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1568() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1567() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1566() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1565() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1564() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1563() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1562() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1561() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1560() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1559() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1558() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1557() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1556() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1555() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1554() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1553() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1552() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1551() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1550() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1549() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1548() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1547() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1546() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1545() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1544() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1543() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1542() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1541() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1540() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1539() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1538() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1537() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1536() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1535() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1534() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1533() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1532() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1531() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1530() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1529() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1528() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1527() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1526() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1525() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1524() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1523() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1522() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1521() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1520() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1519() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1518() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1517() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1516() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1515() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1514() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1513() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1512() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1511() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1510() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1509() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1508() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1507() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1506() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1505() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1504() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1503() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1502() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1501() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1500() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1499() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1498() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1497() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1496() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1495() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1494() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1493() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1492() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1491() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1490() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1489() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1488() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1487() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1486() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1485() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1484() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1483() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1482() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1481() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1480() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1479() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1478() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1477() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1476() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1475() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1474() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1473() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1472() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1471() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1470() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1469() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1468() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1467() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1466() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1465() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1464() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1463() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1462() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1461() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1460() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1459() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1458() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1457() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1456() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1455() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1454() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1453() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1452() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1451() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1450() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1449() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1448() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1447() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1446() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1445() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1444() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1443() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1442() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1441() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1440() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1439() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1438() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1437() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1436() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1435() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1434() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1433() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1432() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1431() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1430() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1429() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1428() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1427() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1426() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1425() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1424() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1423() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1422() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1421() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1420() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1419() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1418() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1417() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1416() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1415() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1414() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1413() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1412() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1411() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1410() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1409() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1408() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1407() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1406() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1405() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1404() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1403() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1402() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1401() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1400() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1399() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1398() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1397() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1396() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1395() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1394() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1393() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1392() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1391() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1390() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1389() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1388() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1387() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1386() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1385() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1384() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1383() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1382() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1381() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1380() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1379() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1378() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1377() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1376() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1375() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1374() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1373() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1372() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1371() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1370() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1369() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1368() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1367() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1366() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1365() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1364() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1363() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1362() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1361() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1360() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1359() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1358() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1357() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1356() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1355() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1354() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1353() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1352() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1351() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1350() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1349() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1348() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1347() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1346() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1345() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1344() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1343() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1342() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1341() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1340() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1339() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1338() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1337() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1336() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1335() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1334() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1333() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1332() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1331() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1330() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1329() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1328() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1327() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1326() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1325() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1324() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1323() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1322() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1321() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1320() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1319() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1318() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1317() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1316() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1315() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1314() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1313() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1312() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1311() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1310() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1309() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1308() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1307() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1306() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1305() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1304() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1303() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1302() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1301() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1300() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1299() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1298() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1297() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1296() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1295() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1294() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1293() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1292() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1291() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1290() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1289() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1288() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1287() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1286() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1285() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1284() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1283() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1282() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1281() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1280() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1279() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1278() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1277() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1276() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1275() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1274() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1273() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1272() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1271() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1270() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1269() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1268() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1267() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1266() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1265() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1264() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1263() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1262() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1261() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1260() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1259() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1258() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1257() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1256() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1255() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1254() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1253() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1252() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1251() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1250() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1249() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1248() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1247() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1246() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1245() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1244() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1243() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1242() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1241() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1240() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1239() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1238() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1237() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1236() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1235() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1234() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1233() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1232() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1231() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1230() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1229() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1228() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1227() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1226() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1225() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1224() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1223() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1222() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1221() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1220() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1219() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1218() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1217() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1216() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1215() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1214() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1213() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1212() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1211() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1210() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1209() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1208() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1207() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1206() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1205() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1204() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1203() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1202() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1201() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1200() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1199() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1198() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1197() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1196() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1195() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1194() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1193() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1192() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1191() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1190() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1189() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1188() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1187() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1186() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1185() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1184() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1183() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1182() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1181() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1180() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1179() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1178() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1177() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1176() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1175() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1174() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1173() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1172() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1171() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1170() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1169() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1168() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1167() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1166() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1165() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1164() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1163() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1162() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1161() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1160() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1159() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1158() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1157() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1156() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1155() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1154() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1153() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1152() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1151() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1150() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1149() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1148() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1147() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1146() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1145() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1144() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1143() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1142() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1141() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1140() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1139() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1138() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1137() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1136() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1135() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1134() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1133() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1132() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1131() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1130() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1129() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1128() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1127() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1126() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1125() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1124() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1123() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1122() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1121() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1120() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1119() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1118() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1117() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1116() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1115() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1114() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1113() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1112() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1111() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1110() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1109() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1108() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1107() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1106() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1105() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1104() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1103() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1102() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1101() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1100() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1099() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1098() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1097() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1096() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1095() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1094() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1093() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1092() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1091() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1090() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1089() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1088() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1087() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1086() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1085() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1084() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1083() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1082() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1081() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1080() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1079() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1078() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1077() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1076() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1075() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1074() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1073() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1072() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1071() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1070() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1069() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1068() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1067() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1066() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1065() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1064() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1063() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1062() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1061() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1060() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1059() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1058() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1057() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1056() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1055() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1054() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1053() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1052() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1051() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1050() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1049() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1048() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1047() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1046() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1045() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1044() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1043() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1042() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1041() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1040() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1039() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1038() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1037() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1036() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1035() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1034() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1033() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1032() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1031() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1030() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1029() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1028() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1027() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1026() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1025() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1024() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1023() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1022() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1021() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1020() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1019() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1018() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1017() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1016() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1015() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1014() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1013() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1012() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1011() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1010() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1009() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1008() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1007() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1006() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1005() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1004() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1003() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1002() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1001() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1000() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_999() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_998() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_997() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_996() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_995() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_994() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_993() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_992() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_991() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_990() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_989() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_988() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_987() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_986() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_985() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_984() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_983() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_982() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_981() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_980() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_979() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_978() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_977() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_976() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_975() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_974() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_973() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_972() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_971() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_970() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_969() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_968() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_967() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_966() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_965() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_964() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_963() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_962() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_961() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_960() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_959() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_958() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_957() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_956() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_955() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_954() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_953() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_952() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_951() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_950() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_949() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_948() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_947() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_946() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_945() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_944() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_943() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_942() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_941() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_940() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_939() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_938() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_937() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_936() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_935() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_934() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_933() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_932() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_931() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_930() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_929() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_928() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_927() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_926() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_925() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_924() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_923() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_922() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_921() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_920() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_919() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_918() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_917() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_916() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_915() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_914() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_913() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_912() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_911() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_910() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_909() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_908() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_907() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_906() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_905() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_904() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_903() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_902() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_901() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_900() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_899() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_898() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_897() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_896() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_895() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_894() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_893() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_892() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_891() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_890() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_889() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_888() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_887() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_886() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_885() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_884() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_883() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_882() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_881() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_880() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_879() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_878() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_877() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_876() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_875() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_874() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_873() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_872() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_871() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_870() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_869() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_868() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_867() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_866() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_865() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_864() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_863() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_862() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_861() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_860() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_859() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_858() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_857() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_856() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_855() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_854() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_853() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_852() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_851() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_850() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_849() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_848() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_847() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_846() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_845() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_844() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_843() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_842() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_841() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_840() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_839() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_838() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_837() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_836() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_835() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_834() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_833() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_832() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_831() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_830() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_829() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_828() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_827() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_826() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_825() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_824() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_823() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_822() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_821() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_820() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_819() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_818() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_817() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_816() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_815() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_814() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_813() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_812() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_811() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_810() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_809() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_808() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_807() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_806() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_805() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_804() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_803() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_802() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_801() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_800() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_799() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_798() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_797() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_796() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_795() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_794() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_793() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_792() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_791() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_790() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_789() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_788() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_787() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_786() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_785() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_784() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_783() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_782() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_781() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_780() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_779() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_778() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_777() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_776() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_775() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_774() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_773() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_772() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_771() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_770() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_769() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_768() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_767() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_766() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_765() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_764() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_763() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_762() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_761() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_760() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_759() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_758() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_757() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_756() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_755() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_754() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_753() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_752() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_751() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_750() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_749() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_748() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_747() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_746() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_745() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_744() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_743() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_742() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_741() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_740() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_739() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_738() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_737() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_736() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_735() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_734() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_733() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_732() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_731() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_730() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_729() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_728() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_727() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_726() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_725() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_724() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_723() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_722() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_721() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_720() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_719() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_718() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_717() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_716() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_715() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_714() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_713() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_712() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_711() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_710() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_709() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_708() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_707() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_706() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_705() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_704() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_703() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_702() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_701() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_700() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_699() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_698() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_697() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_696() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_695() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_694() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_693() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_692() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_691() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_690() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_689() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_688() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_687() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_686() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_685() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_684() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_683() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_682() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_681() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_680() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_679() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_678() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_677() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_676() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_675() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_674() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_673() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_672() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_671() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_670() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_669() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_668() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_667() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_666() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_665() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_664() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_663() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_662() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_661() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_660() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_659() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_658() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_657() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_656() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_655() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_654() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_653() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_652() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_651() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_650() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_649() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_648() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_647() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_646() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_645() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_644() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_643() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_642() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_641() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_640() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_639() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_638() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_637() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_636() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_635() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_634() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_633() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_632() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_631() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_630() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_629() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_628() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_627() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_626() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_625() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_624() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_623() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_622() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_621() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_620() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_619() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_618() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_617() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_616() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_615() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_614() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_613() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_612() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_611() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_610() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_609() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_608() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_607() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_606() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_605() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_604() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_603() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_602() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_601() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_600() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_599() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_598() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_597() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_596() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_595() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_594() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_593() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_592() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_591() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_590() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_589() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_588() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_587() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_586() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_585() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_584() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_583() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_582() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_581() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_580() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_579() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_578() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_577() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_576() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_575() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_574() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_573() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_572() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_571() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_570() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_569() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_568() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_567() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_566() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_565() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_564() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_563() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_562() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_561() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_560() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_559() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_558() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_557() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_556() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_555() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_554() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_553() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_552() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_551() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_550() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_549() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_548() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_547() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_546() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_545() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_544() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_543() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_542() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_541() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_540() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_539() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_538() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_537() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_536() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_535() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_534() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_533() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_532() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_531() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_530() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_529() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_528() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_527() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_526() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_525() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_524() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_523() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_522() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_521() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_520() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_519() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_518() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_517() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_516() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_515() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_514() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_513() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_512() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_511() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_510() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_509() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_508() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_507() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_506() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_505() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_504() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_503() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_502() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_501() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_500() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_499() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_498() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_497() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_496() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_495() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_494() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_493() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_492() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_491() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_490() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_489() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_488() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_487() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_486() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_485() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_484() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_483() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_482() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_481() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_480() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_479() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_478() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_477() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_476() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_475() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_474() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_473() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_472() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_471() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_470() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_469() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_468() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_467() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_466() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_465() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_464() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_463() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_462() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_461() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_460() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_459() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_458() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_457() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_456() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_455() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_454() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_453() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_452() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_451() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_450() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_449() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_448() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_447() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_446() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_445() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_444() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_443() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_442() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_441() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_440() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_439() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_438() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_437() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_436() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_435() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_434() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_433() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_432() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_431() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_430() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_429() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_428() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_427() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_426() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_425() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_424() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_423() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_422() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_421() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_420() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_419() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_418() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_417() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_416() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_415() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_414() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_413() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_412() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_411() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_410() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_409() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_408() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_407() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_406() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_405() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_404() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_403() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_402() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_401() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_400() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_399() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_398() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_397() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_396() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_395() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_394() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_393() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_392() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_391() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_390() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_389() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_388() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_387() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_386() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_385() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_384() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_383() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_382() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_381() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_380() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_379() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_378() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_377() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_376() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_375() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_374() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_373() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_372() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_371() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_370() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_369() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_368() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_367() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_366() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_365() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_364() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_363() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_362() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_361() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_360() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_359() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_358() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_357() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_356() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_355() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_354() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_353() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_352() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_351() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_350() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_349() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_348() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_347() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_346() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_345() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_344() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_343() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_342() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_341() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_340() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_339() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_338() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_337() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_336() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_335() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_334() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_333() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_332() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_331() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_330() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_329() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_328() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_327() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_326() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_325() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_324() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_323() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_322() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_321() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_320() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_319() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_318() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_317() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_316() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_315() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_314() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_313() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_312() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_311() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_310() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_309() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_308() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_307() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_306() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_305() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_304() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_303() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_302() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_301() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_300() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_299() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_298() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_297() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_296() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_295() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_294() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_293() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_292() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_291() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_290() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_289() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_288() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_287() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_286() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_285() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_284() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_283() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_282() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_281() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_280() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_279() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_278() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_277() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_276() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_275() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_274() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_273() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_272() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_271() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_270() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_269() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_268() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_267() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_266() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_265() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_264() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_263() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_262() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_261() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_260() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_259() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_258() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_257() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_256() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_255() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_254() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_253() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_252() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_251() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_250() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_249() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_248() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_247() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_246() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_245() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_244() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_243() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_242() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_241() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_240() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_239() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_238() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_237() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_236() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_235() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_234() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_233() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_232() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_231() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_230() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_229() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_228() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_227() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_226() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_225() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_224() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_223() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_222() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_221() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_220() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_219() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_218() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_217() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_216() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_215() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_214() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_213() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_212() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_211() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_210() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_209() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_208() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_207() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_206() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_205() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_204() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_203() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_202() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_201() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_200() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_199() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_198() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_197() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_196() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_195() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_194() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_193() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_192() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_191() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_190() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_189() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_188() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_187() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_186() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_185() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_184() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_183() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_182() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_181() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_180() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_179() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_178() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_177() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_176() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_175() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_174() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_173() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_172() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_171() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_170() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_169() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_168() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_167() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_166() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_165() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_164() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_163() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_162() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_161() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_160() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_159() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_158() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_157() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_156() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_155() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_154() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_153() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_152() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_151() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_150() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_149() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_148() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_147() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_146() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_145() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_144() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_143() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_142() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_141() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_140() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_139() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_138() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_137() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_136() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_135() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_134() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_133() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_132() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_131() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_130() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_129() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_128() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_127() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_126() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_125() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_124() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_123() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_122() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_121() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_120() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_119() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_118() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_117() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_116() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_115() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_114() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_113() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_112() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_111() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_110() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_109() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_108() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_107() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_106() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_105() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_104() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_103() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_102() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_101() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_100() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_99() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_98() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_97() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_96() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_95() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_94() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_93() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_92() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_91() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_90() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_89() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_88() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_87() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_86() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_85() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_84() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_83() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_82() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_81() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_80() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_79() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_78() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_77() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_76() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_75() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_74() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_73() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_72() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_71() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_70() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_69() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_68() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_67() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_66() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_65() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_64() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_63() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_62() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_61() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_60() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_59() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_58() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_57() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_56() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_55() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_54() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_53() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_52() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_51() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_50() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_49() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_48() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_47() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_46() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_45() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_44() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_43() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_42() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_41() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_40() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_39() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_38() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_37() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_36() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_35() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_34() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_33() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_32() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_31() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_30() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_29() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_28() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_27() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_26() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_25() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_24() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_23() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_22() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_21() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_20() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_19() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_18() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_17() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_16() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_15() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_14() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_13() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_12() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_11() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_10() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_9() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_8() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_7() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_6() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_5() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_4() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_3() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_2() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_1() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization_0() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    public void testObjectEqualButNotSameSerialization() throws java.lang.Exception {
        com.google.gson.common.TestTypes.ClassOverridingEquals objA = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        com.google.gson.common.TestTypes.ClassOverridingEquals objB = new com.google.gson.common.TestTypes.ClassOverridingEquals();
        objB.ref = objA;
        java.lang.String json = gson.toJson(objB);
        junit.framework.Assert.assertEquals(objB.getExpectedJson(), json);
    }

    private enum OperationType {

        OP1,
        OP2;}

    private static class Base {
        com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.OperationType opType;
    }

    private static class Derived1 extends com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.Base {
        Derived1() {
            opType = com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.OperationType.OP1;
        }
    }

    private static class Derived2 extends com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.Base {
        Derived2() {
            opType = com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.OperationType.OP2;
        }
    }

    private static class BaseTypeAdapter implements com.google.gson.JsonDeserializer<com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.Base> {
        public com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.Base deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {
            java.lang.String opTypeStr = json.getAsJsonObject().get("opType").getAsString();
            com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.OperationType opType = com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.OperationType.valueOf(opTypeStr);
            switch (opType) {
                case OP1 :
                    return new com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.Derived1();
                case OP2 :
                    return new com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.Derived2();
            }
            throw new com.google.gson.JsonParseException("unknown type: " + json);
        }
    }

    public static junit.framework.Test suite() {
        junit.extensions.TestSetup setup = new junit.extensions.TestSetup(new junit.framework.TestSuite(com.google.gson.functional.UncategorizedTest_testObjectEqualButNotSameSerialization_2000.class) {}) {
            protected void setUp() {
                org.powerapi.jjoules.junit4.EnergyTest.beforeTest("com.google.gson.functional.UncategorizedTest", "testObjectEqualButNotSameSerialization");
            }

            protected void tearDown() {
                org.powerapi.jjoules.junit4.EnergyTest.afterTest();
            }
        };
        return setup;
    }
}