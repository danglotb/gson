/* Copyright (C) 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.google.gson.functional;
import java.io.Reader;
import java.io.Writer;
/**
 * Functional tests for the support of {@link Reader}s and {@link Writer}s.
 *
 * @author Inderjeet Singh
 * @author Joel Leitch
 */
public class ReadersWritersTest_testReadWriteTwoObjects_1000 extends junit.framework.TestCase {
    private com.google.gson.Gson gson;

    @java.lang.Override
    protected void setUp() throws java.lang.Exception {
        super.setUp();
        gson = new com.google.gson.Gson();
    }

    public void testReadWriteTwoObjects_999() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_998() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_997() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_996() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_995() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_994() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_993() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_992() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_991() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_990() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_989() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_988() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_987() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_986() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_985() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_984() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_983() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_982() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_981() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_980() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_979() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_978() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_977() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_976() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_975() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_974() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_973() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_972() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_971() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_970() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_969() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_968() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_967() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_966() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_965() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_964() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_963() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_962() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_961() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_960() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_959() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_958() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_957() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_956() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_955() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_954() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_953() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_952() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_951() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_950() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_949() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_948() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_947() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_946() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_945() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_944() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_943() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_942() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_941() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_940() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_939() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_938() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_937() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_936() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_935() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_934() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_933() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_932() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_931() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_930() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_929() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_928() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_927() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_926() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_925() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_924() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_923() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_922() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_921() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_920() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_919() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_918() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_917() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_916() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_915() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_914() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_913() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_912() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_911() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_910() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_909() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_908() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_907() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_906() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_905() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_904() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_903() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_902() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_901() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_900() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_899() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_898() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_897() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_896() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_895() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_894() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_893() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_892() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_891() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_890() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_889() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_888() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_887() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_886() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_885() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_884() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_883() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_882() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_881() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_880() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_879() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_878() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_877() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_876() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_875() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_874() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_873() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_872() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_871() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_870() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_869() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_868() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_867() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_866() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_865() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_864() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_863() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_862() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_861() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_860() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_859() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_858() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_857() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_856() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_855() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_854() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_853() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_852() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_851() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_850() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_849() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_848() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_847() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_846() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_845() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_844() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_843() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_842() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_841() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_840() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_839() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_838() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_837() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_836() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_835() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_834() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_833() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_832() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_831() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_830() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_829() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_828() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_827() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_826() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_825() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_824() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_823() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_822() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_821() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_820() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_819() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_818() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_817() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_816() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_815() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_814() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_813() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_812() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_811() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_810() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_809() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_808() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_807() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_806() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_805() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_804() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_803() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_802() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_801() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_800() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_799() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_798() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_797() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_796() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_795() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_794() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_793() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_792() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_791() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_790() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_789() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_788() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_787() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_786() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_785() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_784() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_783() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_782() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_781() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_780() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_779() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_778() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_777() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_776() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_775() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_774() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_773() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_772() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_771() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_770() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_769() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_768() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_767() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_766() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_765() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_764() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_763() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_762() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_761() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_760() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_759() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_758() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_757() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_756() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_755() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_754() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_753() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_752() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_751() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_750() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_749() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_748() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_747() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_746() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_745() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_744() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_743() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_742() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_741() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_740() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_739() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_738() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_737() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_736() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_735() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_734() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_733() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_732() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_731() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_730() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_729() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_728() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_727() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_726() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_725() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_724() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_723() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_722() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_721() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_720() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_719() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_718() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_717() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_716() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_715() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_714() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_713() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_712() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_711() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_710() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_709() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_708() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_707() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_706() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_705() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_704() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_703() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_702() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_701() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_700() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_699() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_698() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_697() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_696() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_695() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_694() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_693() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_692() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_691() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_690() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_689() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_688() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_687() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_686() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_685() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_684() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_683() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_682() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_681() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_680() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_679() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_678() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_677() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_676() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_675() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_674() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_673() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_672() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_671() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_670() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_669() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_668() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_667() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_666() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_665() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_664() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_663() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_662() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_661() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_660() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_659() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_658() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_657() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_656() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_655() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_654() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_653() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_652() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_651() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_650() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_649() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_648() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_647() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_646() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_645() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_644() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_643() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_642() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_641() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_640() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_639() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_638() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_637() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_636() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_635() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_634() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_633() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_632() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_631() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_630() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_629() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_628() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_627() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_626() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_625() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_624() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_623() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_622() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_621() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_620() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_619() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_618() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_617() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_616() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_615() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_614() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_613() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_612() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_611() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_610() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_609() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_608() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_607() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_606() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_605() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_604() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_603() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_602() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_601() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_600() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_599() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_598() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_597() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_596() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_595() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_594() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_593() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_592() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_591() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_590() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_589() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_588() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_587() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_586() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_585() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_584() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_583() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_582() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_581() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_580() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_579() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_578() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_577() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_576() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_575() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_574() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_573() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_572() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_571() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_570() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_569() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_568() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_567() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_566() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_565() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_564() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_563() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_562() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_561() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_560() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_559() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_558() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_557() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_556() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_555() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_554() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_553() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_552() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_551() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_550() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_549() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_548() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_547() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_546() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_545() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_544() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_543() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_542() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_541() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_540() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_539() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_538() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_537() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_536() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_535() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_534() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_533() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_532() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_531() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_530() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_529() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_528() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_527() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_526() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_525() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_524() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_523() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_522() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_521() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_520() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_519() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_518() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_517() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_516() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_515() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_514() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_513() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_512() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_511() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_510() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_509() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_508() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_507() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_506() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_505() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_504() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_503() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_502() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_501() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_500() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_499() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_498() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_497() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_496() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_495() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_494() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_493() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_492() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_491() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_490() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_489() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_488() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_487() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_486() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_485() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_484() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_483() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_482() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_481() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_480() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_479() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_478() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_477() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_476() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_475() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_474() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_473() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_472() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_471() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_470() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_469() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_468() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_467() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_466() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_465() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_464() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_463() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_462() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_461() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_460() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_459() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_458() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_457() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_456() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_455() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_454() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_453() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_452() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_451() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_450() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_449() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_448() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_447() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_446() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_445() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_444() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_443() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_442() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_441() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_440() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_439() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_438() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_437() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_436() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_435() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_434() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_433() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_432() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_431() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_430() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_429() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_428() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_427() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_426() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_425() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_424() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_423() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_422() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_421() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_420() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_419() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_418() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_417() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_416() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_415() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_414() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_413() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_412() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_411() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_410() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_409() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_408() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_407() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_406() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_405() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_404() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_403() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_402() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_401() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_400() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_399() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_398() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_397() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_396() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_395() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_394() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_393() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_392() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_391() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_390() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_389() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_388() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_387() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_386() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_385() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_384() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_383() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_382() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_381() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_380() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_379() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_378() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_377() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_376() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_375() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_374() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_373() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_372() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_371() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_370() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_369() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_368() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_367() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_366() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_365() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_364() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_363() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_362() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_361() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_360() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_359() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_358() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_357() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_356() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_355() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_354() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_353() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_352() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_351() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_350() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_349() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_348() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_347() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_346() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_345() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_344() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_343() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_342() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_341() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_340() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_339() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_338() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_337() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_336() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_335() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_334() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_333() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_332() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_331() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_330() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_329() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_328() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_327() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_326() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_325() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_324() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_323() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_322() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_321() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_320() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_319() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_318() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_317() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_316() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_315() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_314() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_313() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_312() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_311() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_310() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_309() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_308() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_307() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_306() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_305() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_304() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_303() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_302() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_301() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_300() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_299() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_298() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_297() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_296() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_295() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_294() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_293() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_292() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_291() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_290() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_289() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_288() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_287() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_286() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_285() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_284() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_283() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_282() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_281() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_280() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_279() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_278() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_277() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_276() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_275() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_274() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_273() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_272() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_271() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_270() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_269() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_268() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_267() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_266() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_265() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_264() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_263() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_262() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_261() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_260() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_259() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_258() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_257() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_256() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_255() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_254() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_253() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_252() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_251() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_250() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_249() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_248() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_247() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_246() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_245() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_244() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_243() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_242() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_241() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_240() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_239() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_238() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_237() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_236() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_235() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_234() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_233() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_232() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_231() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_230() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_229() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_228() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_227() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_226() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_225() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_224() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_223() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_222() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_221() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_220() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_219() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_218() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_217() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_216() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_215() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_214() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_213() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_212() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_211() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_210() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_209() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_208() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_207() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_206() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_205() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_204() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_203() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_202() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_201() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_200() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_199() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_198() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_197() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_196() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_195() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_194() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_193() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_192() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_191() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_190() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_189() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_188() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_187() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_186() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_185() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_184() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_183() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_182() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_181() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_180() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_179() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_178() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_177() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_176() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_175() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_174() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_173() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_172() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_171() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_170() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_169() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_168() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_167() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_166() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_165() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_164() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_163() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_162() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_161() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_160() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_159() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_158() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_157() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_156() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_155() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_154() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_153() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_152() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_151() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_150() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_149() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_148() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_147() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_146() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_145() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_144() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_143() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_142() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_141() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_140() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_139() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_138() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_137() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_136() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_135() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_134() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_133() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_132() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_131() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_130() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_129() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_128() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_127() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_126() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_125() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_124() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_123() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_122() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_121() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_120() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_119() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_118() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_117() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_116() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_115() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_114() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_113() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_112() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_111() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_110() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_109() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_108() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_107() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_106() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_105() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_104() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_103() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_102() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_101() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_100() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_99() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_98() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_97() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_96() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_95() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_94() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_93() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_92() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_91() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_90() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_89() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_88() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_87() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_86() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_85() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_84() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_83() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_82() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_81() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_80() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_79() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_78() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_77() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_76() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_75() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_74() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_73() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_72() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_71() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_70() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_69() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_68() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_67() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_66() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_65() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_64() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_63() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_62() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_61() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_60() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_59() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_58() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_57() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_56() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_55() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_54() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_53() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_52() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_51() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_50() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_49() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_48() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_47() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_46() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_45() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_44() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_43() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_42() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_41() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_40() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_39() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_38() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_37() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_36() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_35() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_34() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_33() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_32() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_31() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_30() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_29() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_28() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_27() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_26() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_25() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_24() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_23() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_22() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_21() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_20() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_19() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_18() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_17() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_16() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_15() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_14() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_13() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_12() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_11() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_10() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_9() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_8() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_7() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_6() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_5() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_4() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_3() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_2() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_1() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public void testReadWriteTwoObjects_0() throws java.io.IOException {
        com.google.gson.Gson gson = new com.google.gson.Gson();
        java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
        com.google.gson.common.TestTypes.BagOfPrimitives expectedOne = new com.google.gson.common.TestTypes.BagOfPrimitives(1, 1, true, "one");
        writer.write(gson.toJson(expectedOne).toCharArray());
        com.google.gson.common.TestTypes.BagOfPrimitives expectedTwo = new com.google.gson.common.TestTypes.BagOfPrimitives(2, 2, false, "two");
        writer.write(gson.toJson(expectedTwo).toCharArray());
        java.io.CharArrayReader reader = new java.io.CharArrayReader(writer.toCharArray());
        com.google.gson.JsonStreamParser parser = new com.google.gson.JsonStreamParser(reader);
        com.google.gson.common.TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("one", actualOne.stringValue);
        com.google.gson.common.TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), com.google.gson.common.TestTypes.BagOfPrimitives.class);
        junit.framework.Assert.assertEquals("two", actualTwo.stringValue);
        junit.framework.Assert.assertFalse(parser.hasNext());
    }

    public static junit.framework.Test suite() {
        junit.extensions.TestSetup setup = new junit.extensions.TestSetup(new junit.framework.TestSuite(com.google.gson.functional.ReadersWritersTest_testReadWriteTwoObjects_1000.class) {}) {
            protected void setUp() {
                org.powerapi.jjoules.junit4.EnergyTest.beforeTest("com.google.gson.functional.ReadersWritersTest", "testReadWriteTwoObjects");
            }

            protected void tearDown() {
                org.powerapi.jjoules.junit4.EnergyTest.afterTest();
            }
        };
        return setup;
    }
}