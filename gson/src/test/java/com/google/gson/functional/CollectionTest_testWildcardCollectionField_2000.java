/* Copyright (C) 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.google.gson.functional;
/**
 * Functional tests for Json serialization and deserialization of collections.
 *
 * @author Inderjeet Singh
 * @author Joel Leitch
 */
public class CollectionTest_testWildcardCollectionField_2000 extends junit.framework.TestCase {
    private com.google.gson.Gson gson;

    @java.lang.Override
    protected void setUp() throws java.lang.Exception {
        super.setUp();
        gson = new com.google.gson.Gson();
    }

    public void testWildcardCollectionField_1999() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1998() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1997() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1996() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1995() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1994() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1993() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1992() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1991() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1990() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1989() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1988() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1987() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1986() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1985() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1984() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1983() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1982() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1981() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1980() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1979() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1978() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1977() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1976() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1975() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1974() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1973() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1972() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1971() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1970() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1969() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1968() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1967() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1966() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1965() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1964() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1963() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1962() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1961() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1960() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1959() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1958() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1957() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1956() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1955() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1954() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1953() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1952() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1951() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1950() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1949() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1948() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1947() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1946() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1945() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1944() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1943() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1942() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1941() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1940() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1939() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1938() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1937() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1936() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1935() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1934() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1933() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1932() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1931() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1930() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1929() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1928() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1927() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1926() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1925() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1924() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1923() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1922() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1921() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1920() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1919() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1918() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1917() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1916() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1915() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1914() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1913() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1912() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1911() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1910() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1909() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1908() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1907() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1906() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1905() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1904() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1903() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1902() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1901() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1900() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1899() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1898() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1897() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1896() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1895() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1894() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1893() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1892() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1891() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1890() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1889() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1888() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1887() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1886() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1885() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1884() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1883() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1882() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1881() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1880() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1879() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1878() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1877() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1876() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1875() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1874() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1873() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1872() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1871() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1870() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1869() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1868() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1867() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1866() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1865() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1864() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1863() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1862() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1861() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1860() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1859() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1858() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1857() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1856() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1855() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1854() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1853() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1852() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1851() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1850() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1849() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1848() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1847() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1846() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1845() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1844() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1843() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1842() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1841() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1840() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1839() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1838() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1837() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1836() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1835() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1834() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1833() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1832() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1831() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1830() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1829() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1828() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1827() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1826() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1825() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1824() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1823() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1822() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1821() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1820() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1819() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1818() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1817() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1816() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1815() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1814() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1813() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1812() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1811() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1810() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1809() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1808() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1807() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1806() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1805() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1804() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1803() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1802() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1801() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1800() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1799() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1798() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1797() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1796() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1795() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1794() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1793() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1792() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1791() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1790() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1789() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1788() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1787() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1786() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1785() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1784() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1783() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1782() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1781() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1780() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1779() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1778() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1777() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1776() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1775() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1774() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1773() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1772() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1771() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1770() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1769() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1768() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1767() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1766() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1765() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1764() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1763() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1762() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1761() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1760() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1759() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1758() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1757() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1756() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1755() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1754() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1753() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1752() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1751() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1750() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1749() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1748() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1747() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1746() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1745() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1744() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1743() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1742() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1741() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1740() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1739() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1738() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1737() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1736() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1735() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1734() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1733() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1732() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1731() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1730() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1729() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1728() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1727() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1726() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1725() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1724() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1723() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1722() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1721() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1720() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1719() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1718() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1717() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1716() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1715() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1714() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1713() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1712() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1711() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1710() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1709() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1708() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1707() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1706() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1705() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1704() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1703() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1702() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1701() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1700() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1699() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1698() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1697() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1696() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1695() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1694() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1693() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1692() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1691() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1690() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1689() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1688() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1687() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1686() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1685() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1684() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1683() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1682() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1681() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1680() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1679() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1678() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1677() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1676() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1675() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1674() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1673() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1672() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1671() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1670() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1669() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1668() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1667() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1666() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1665() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1664() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1663() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1662() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1661() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1660() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1659() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1658() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1657() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1656() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1655() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1654() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1653() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1652() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1651() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1650() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1649() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1648() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1647() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1646() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1645() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1644() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1643() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1642() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1641() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1640() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1639() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1638() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1637() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1636() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1635() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1634() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1633() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1632() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1631() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1630() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1629() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1628() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1627() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1626() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1625() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1624() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1623() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1622() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1621() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1620() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1619() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1618() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1617() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1616() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1615() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1614() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1613() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1612() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1611() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1610() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1609() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1608() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1607() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1606() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1605() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1604() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1603() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1602() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1601() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1600() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1599() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1598() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1597() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1596() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1595() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1594() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1593() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1592() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1591() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1590() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1589() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1588() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1587() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1586() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1585() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1584() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1583() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1582() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1581() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1580() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1579() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1578() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1577() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1576() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1575() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1574() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1573() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1572() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1571() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1570() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1569() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1568() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1567() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1566() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1565() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1564() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1563() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1562() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1561() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1560() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1559() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1558() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1557() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1556() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1555() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1554() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1553() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1552() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1551() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1550() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1549() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1548() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1547() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1546() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1545() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1544() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1543() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1542() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1541() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1540() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1539() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1538() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1537() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1536() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1535() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1534() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1533() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1532() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1531() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1530() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1529() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1528() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1527() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1526() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1525() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1524() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1523() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1522() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1521() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1520() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1519() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1518() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1517() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1516() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1515() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1514() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1513() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1512() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1511() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1510() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1509() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1508() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1507() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1506() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1505() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1504() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1503() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1502() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1501() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1500() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1499() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1498() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1497() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1496() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1495() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1494() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1493() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1492() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1491() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1490() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1489() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1488() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1487() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1486() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1485() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1484() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1483() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1482() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1481() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1480() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1479() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1478() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1477() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1476() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1475() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1474() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1473() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1472() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1471() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1470() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1469() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1468() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1467() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1466() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1465() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1464() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1463() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1462() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1461() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1460() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1459() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1458() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1457() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1456() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1455() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1454() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1453() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1452() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1451() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1450() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1449() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1448() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1447() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1446() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1445() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1444() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1443() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1442() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1441() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1440() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1439() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1438() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1437() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1436() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1435() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1434() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1433() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1432() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1431() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1430() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1429() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1428() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1427() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1426() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1425() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1424() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1423() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1422() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1421() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1420() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1419() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1418() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1417() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1416() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1415() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1414() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1413() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1412() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1411() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1410() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1409() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1408() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1407() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1406() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1405() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1404() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1403() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1402() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1401() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1400() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1399() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1398() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1397() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1396() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1395() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1394() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1393() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1392() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1391() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1390() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1389() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1388() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1387() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1386() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1385() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1384() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1383() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1382() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1381() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1380() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1379() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1378() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1377() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1376() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1375() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1374() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1373() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1372() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1371() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1370() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1369() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1368() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1367() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1366() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1365() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1364() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1363() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1362() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1361() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1360() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1359() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1358() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1357() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1356() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1355() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1354() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1353() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1352() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1351() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1350() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1349() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1348() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1347() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1346() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1345() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1344() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1343() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1342() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1341() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1340() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1339() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1338() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1337() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1336() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1335() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1334() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1333() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1332() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1331() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1330() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1329() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1328() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1327() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1326() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1325() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1324() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1323() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1322() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1321() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1320() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1319() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1318() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1317() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1316() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1315() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1314() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1313() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1312() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1311() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1310() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1309() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1308() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1307() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1306() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1305() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1304() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1303() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1302() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1301() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1300() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1299() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1298() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1297() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1296() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1295() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1294() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1293() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1292() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1291() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1290() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1289() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1288() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1287() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1286() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1285() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1284() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1283() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1282() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1281() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1280() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1279() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1278() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1277() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1276() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1275() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1274() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1273() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1272() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1271() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1270() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1269() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1268() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1267() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1266() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1265() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1264() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1263() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1262() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1261() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1260() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1259() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1258() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1257() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1256() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1255() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1254() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1253() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1252() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1251() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1250() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1249() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1248() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1247() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1246() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1245() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1244() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1243() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1242() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1241() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1240() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1239() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1238() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1237() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1236() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1235() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1234() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1233() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1232() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1231() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1230() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1229() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1228() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1227() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1226() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1225() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1224() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1223() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1222() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1221() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1220() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1219() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1218() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1217() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1216() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1215() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1214() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1213() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1212() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1211() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1210() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1209() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1208() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1207() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1206() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1205() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1204() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1203() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1202() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1201() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1200() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1199() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1198() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1197() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1196() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1195() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1194() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1193() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1192() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1191() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1190() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1189() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1188() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1187() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1186() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1185() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1184() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1183() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1182() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1181() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1180() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1179() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1178() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1177() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1176() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1175() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1174() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1173() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1172() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1171() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1170() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1169() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1168() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1167() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1166() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1165() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1164() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1163() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1162() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1161() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1160() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1159() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1158() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1157() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1156() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1155() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1154() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1153() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1152() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1151() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1150() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1149() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1148() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1147() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1146() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1145() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1144() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1143() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1142() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1141() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1140() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1139() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1138() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1137() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1136() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1135() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1134() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1133() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1132() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1131() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1130() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1129() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1128() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1127() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1126() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1125() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1124() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1123() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1122() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1121() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1120() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1119() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1118() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1117() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1116() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1115() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1114() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1113() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1112() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1111() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1110() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1109() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1108() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1107() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1106() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1105() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1104() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1103() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1102() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1101() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1100() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1099() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1098() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1097() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1096() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1095() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1094() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1093() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1092() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1091() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1090() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1089() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1088() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1087() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1086() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1085() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1084() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1083() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1082() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1081() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1080() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1079() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1078() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1077() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1076() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1075() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1074() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1073() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1072() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1071() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1070() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1069() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1068() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1067() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1066() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1065() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1064() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1063() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1062() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1061() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1060() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1059() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1058() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1057() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1056() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1055() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1054() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1053() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1052() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1051() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1050() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1049() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1048() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1047() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1046() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1045() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1044() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1043() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1042() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1041() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1040() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1039() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1038() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1037() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1036() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1035() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1034() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1033() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1032() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1031() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1030() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1029() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1028() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1027() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1026() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1025() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1024() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1023() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1022() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1021() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1020() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1019() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1018() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1017() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1016() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1015() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1014() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1013() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1012() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1011() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1010() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1009() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1008() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1007() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1006() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1005() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1004() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1003() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1002() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1001() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1000() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_999() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_998() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_997() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_996() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_995() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_994() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_993() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_992() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_991() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_990() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_989() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_988() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_987() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_986() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_985() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_984() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_983() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_982() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_981() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_980() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_979() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_978() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_977() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_976() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_975() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_974() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_973() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_972() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_971() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_970() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_969() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_968() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_967() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_966() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_965() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_964() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_963() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_962() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_961() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_960() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_959() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_958() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_957() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_956() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_955() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_954() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_953() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_952() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_951() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_950() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_949() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_948() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_947() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_946() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_945() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_944() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_943() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_942() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_941() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_940() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_939() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_938() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_937() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_936() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_935() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_934() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_933() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_932() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_931() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_930() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_929() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_928() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_927() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_926() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_925() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_924() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_923() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_922() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_921() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_920() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_919() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_918() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_917() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_916() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_915() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_914() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_913() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_912() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_911() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_910() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_909() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_908() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_907() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_906() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_905() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_904() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_903() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_902() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_901() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_900() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_899() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_898() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_897() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_896() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_895() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_894() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_893() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_892() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_891() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_890() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_889() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_888() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_887() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_886() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_885() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_884() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_883() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_882() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_881() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_880() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_879() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_878() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_877() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_876() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_875() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_874() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_873() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_872() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_871() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_870() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_869() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_868() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_867() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_866() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_865() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_864() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_863() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_862() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_861() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_860() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_859() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_858() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_857() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_856() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_855() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_854() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_853() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_852() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_851() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_850() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_849() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_848() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_847() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_846() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_845() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_844() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_843() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_842() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_841() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_840() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_839() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_838() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_837() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_836() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_835() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_834() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_833() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_832() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_831() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_830() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_829() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_828() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_827() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_826() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_825() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_824() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_823() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_822() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_821() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_820() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_819() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_818() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_817() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_816() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_815() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_814() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_813() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_812() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_811() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_810() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_809() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_808() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_807() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_806() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_805() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_804() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_803() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_802() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_801() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_800() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_799() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_798() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_797() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_796() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_795() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_794() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_793() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_792() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_791() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_790() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_789() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_788() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_787() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_786() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_785() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_784() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_783() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_782() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_781() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_780() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_779() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_778() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_777() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_776() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_775() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_774() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_773() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_772() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_771() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_770() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_769() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_768() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_767() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_766() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_765() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_764() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_763() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_762() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_761() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_760() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_759() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_758() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_757() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_756() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_755() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_754() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_753() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_752() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_751() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_750() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_749() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_748() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_747() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_746() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_745() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_744() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_743() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_742() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_741() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_740() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_739() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_738() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_737() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_736() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_735() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_734() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_733() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_732() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_731() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_730() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_729() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_728() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_727() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_726() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_725() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_724() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_723() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_722() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_721() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_720() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_719() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_718() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_717() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_716() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_715() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_714() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_713() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_712() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_711() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_710() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_709() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_708() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_707() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_706() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_705() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_704() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_703() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_702() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_701() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_700() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_699() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_698() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_697() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_696() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_695() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_694() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_693() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_692() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_691() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_690() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_689() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_688() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_687() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_686() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_685() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_684() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_683() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_682() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_681() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_680() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_679() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_678() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_677() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_676() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_675() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_674() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_673() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_672() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_671() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_670() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_669() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_668() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_667() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_666() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_665() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_664() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_663() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_662() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_661() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_660() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_659() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_658() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_657() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_656() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_655() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_654() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_653() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_652() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_651() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_650() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_649() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_648() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_647() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_646() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_645() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_644() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_643() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_642() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_641() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_640() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_639() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_638() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_637() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_636() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_635() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_634() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_633() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_632() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_631() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_630() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_629() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_628() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_627() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_626() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_625() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_624() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_623() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_622() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_621() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_620() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_619() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_618() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_617() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_616() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_615() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_614() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_613() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_612() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_611() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_610() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_609() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_608() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_607() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_606() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_605() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_604() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_603() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_602() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_601() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_600() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_599() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_598() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_597() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_596() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_595() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_594() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_593() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_592() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_591() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_590() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_589() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_588() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_587() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_586() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_585() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_584() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_583() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_582() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_581() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_580() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_579() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_578() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_577() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_576() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_575() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_574() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_573() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_572() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_571() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_570() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_569() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_568() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_567() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_566() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_565() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_564() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_563() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_562() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_561() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_560() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_559() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_558() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_557() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_556() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_555() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_554() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_553() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_552() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_551() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_550() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_549() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_548() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_547() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_546() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_545() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_544() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_543() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_542() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_541() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_540() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_539() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_538() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_537() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_536() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_535() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_534() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_533() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_532() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_531() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_530() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_529() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_528() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_527() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_526() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_525() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_524() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_523() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_522() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_521() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_520() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_519() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_518() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_517() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_516() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_515() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_514() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_513() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_512() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_511() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_510() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_509() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_508() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_507() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_506() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_505() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_504() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_503() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_502() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_501() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_500() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_499() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_498() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_497() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_496() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_495() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_494() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_493() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_492() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_491() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_490() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_489() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_488() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_487() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_486() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_485() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_484() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_483() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_482() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_481() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_480() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_479() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_478() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_477() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_476() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_475() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_474() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_473() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_472() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_471() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_470() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_469() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_468() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_467() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_466() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_465() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_464() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_463() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_462() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_461() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_460() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_459() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_458() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_457() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_456() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_455() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_454() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_453() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_452() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_451() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_450() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_449() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_448() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_447() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_446() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_445() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_444() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_443() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_442() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_441() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_440() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_439() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_438() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_437() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_436() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_435() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_434() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_433() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_432() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_431() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_430() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_429() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_428() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_427() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_426() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_425() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_424() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_423() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_422() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_421() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_420() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_419() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_418() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_417() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_416() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_415() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_414() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_413() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_412() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_411() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_410() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_409() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_408() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_407() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_406() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_405() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_404() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_403() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_402() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_401() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_400() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_399() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_398() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_397() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_396() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_395() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_394() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_393() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_392() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_391() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_390() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_389() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_388() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_387() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_386() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_385() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_384() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_383() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_382() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_381() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_380() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_379() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_378() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_377() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_376() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_375() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_374() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_373() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_372() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_371() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_370() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_369() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_368() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_367() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_366() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_365() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_364() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_363() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_362() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_361() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_360() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_359() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_358() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_357() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_356() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_355() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_354() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_353() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_352() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_351() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_350() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_349() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_348() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_347() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_346() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_345() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_344() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_343() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_342() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_341() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_340() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_339() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_338() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_337() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_336() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_335() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_334() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_333() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_332() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_331() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_330() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_329() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_328() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_327() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_326() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_325() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_324() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_323() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_322() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_321() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_320() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_319() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_318() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_317() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_316() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_315() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_314() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_313() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_312() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_311() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_310() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_309() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_308() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_307() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_306() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_305() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_304() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_303() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_302() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_301() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_300() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_299() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_298() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_297() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_296() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_295() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_294() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_293() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_292() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_291() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_290() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_289() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_288() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_287() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_286() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_285() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_284() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_283() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_282() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_281() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_280() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_279() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_278() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_277() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_276() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_275() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_274() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_273() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_272() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_271() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_270() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_269() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_268() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_267() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_266() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_265() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_264() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_263() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_262() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_261() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_260() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_259() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_258() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_257() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_256() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_255() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_254() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_253() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_252() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_251() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_250() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_249() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_248() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_247() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_246() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_245() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_244() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_243() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_242() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_241() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_240() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_239() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_238() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_237() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_236() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_235() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_234() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_233() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_232() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_231() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_230() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_229() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_228() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_227() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_226() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_225() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_224() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_223() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_222() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_221() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_220() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_219() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_218() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_217() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_216() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_215() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_214() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_213() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_212() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_211() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_210() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_209() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_208() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_207() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_206() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_205() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_204() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_203() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_202() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_201() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_200() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_199() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_198() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_197() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_196() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_195() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_194() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_193() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_192() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_191() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_190() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_189() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_188() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_187() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_186() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_185() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_184() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_183() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_182() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_181() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_180() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_179() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_178() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_177() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_176() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_175() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_174() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_173() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_172() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_171() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_170() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_169() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_168() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_167() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_166() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_165() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_164() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_163() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_162() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_161() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_160() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_159() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_158() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_157() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_156() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_155() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_154() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_153() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_152() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_151() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_150() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_149() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_148() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_147() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_146() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_145() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_144() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_143() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_142() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_141() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_140() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_139() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_138() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_137() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_136() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_135() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_134() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_133() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_132() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_131() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_130() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_129() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_128() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_127() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_126() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_125() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_124() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_123() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_122() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_121() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_120() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_119() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_118() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_117() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_116() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_115() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_114() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_113() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_112() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_111() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_110() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_109() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_108() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_107() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_106() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_105() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_104() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_103() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_102() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_101() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_100() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_99() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_98() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_97() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_96() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_95() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_94() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_93() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_92() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_91() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_90() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_89() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_88() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_87() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_86() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_85() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_84() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_83() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_82() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_81() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_80() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_79() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_78() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_77() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_76() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_75() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_74() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_73() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_72() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_71() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_70() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_69() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_68() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_67() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_66() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_65() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_64() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_63() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_62() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_61() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_60() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_59() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_58() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_57() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_56() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_55() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_54() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_53() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_52() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_51() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_50() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_49() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_48() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_47() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_46() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_45() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_44() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_43() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_42() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_41() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_40() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_39() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_38() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_37() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_36() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_35() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_34() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_33() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_32() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_31() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_30() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_29() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_28() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_27() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_26() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_25() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_24() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_23() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_22() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_21() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_20() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_19() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_18() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_17() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_16() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_15() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_14() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_13() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_12() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_11() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_10() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_9() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_8() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_7() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_6() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_5() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_4() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_3() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_2() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_0() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    static class HasArrayListField {
        java.util.ArrayList<java.lang.Long> longs = new java.util.ArrayList<java.lang.Long>();
    }

    @java.lang.SuppressWarnings("unchecked")
    private static int[] toIntArray(java.util.Collection collection) {
        int[] ints = new int[collection.size()];
        int i = 0;
        for (java.util.Iterator iterator = collection.iterator(); iterator.hasNext(); ++i) {
            java.lang.Object obj = iterator.next();
            if (obj instanceof java.lang.Integer) {
                ints[i] = ((java.lang.Integer) (obj)).intValue();
            } else if (obj instanceof java.lang.Long) {
                ints[i] = ((java.lang.Long) (obj)).intValue();
            }
        }
        return ints;
    }

    private static class ObjectWithWildcardCollection {
        private final java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> collection;

        public ObjectWithWildcardCollection(java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> collection) {
            this.collection = collection;
        }

        public java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> getCollection() {
            return collection;
        }
    }

    private static class Entry {
        int value;

        Entry(int value) {
            this.value = value;
        }
    }

    public static junit.framework.Test suite() {
        junit.extensions.TestSetup setup = new junit.extensions.TestSetup(new junit.framework.TestSuite(com.google.gson.functional.CollectionTest_testWildcardCollectionField_2000.class) {}) {
            protected void setUp() {
                org.powerapi.jjoules.junit4.EnergyTest.beforeTest("com.google.gson.functional.CollectionTest", "testWildcardCollectionField");
            }

            protected void tearDown() {
                org.powerapi.jjoules.junit4.EnergyTest.afterTest();
            }
        };
        return setup;
    }
}