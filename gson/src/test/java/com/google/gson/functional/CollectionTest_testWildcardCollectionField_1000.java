/* Copyright (C) 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.google.gson.functional;
/**
 * Functional tests for Json serialization and deserialization of collections.
 *
 * @author Inderjeet Singh
 * @author Joel Leitch
 */
public class CollectionTest_testWildcardCollectionField_1000 extends junit.framework.TestCase {
    private com.google.gson.Gson gson;

    @java.lang.Override
    protected void setUp() throws java.lang.Exception {
        super.setUp();
        gson = new com.google.gson.Gson();
    }

    public void testWildcardCollectionField_999() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_998() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_997() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_996() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_995() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_994() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_993() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_992() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_991() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_990() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_989() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_988() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_987() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_986() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_985() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_984() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_983() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_982() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_981() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_980() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_979() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_978() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_977() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_976() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_975() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_974() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_973() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_972() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_971() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_970() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_969() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_968() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_967() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_966() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_965() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_964() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_963() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_962() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_961() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_960() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_959() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_958() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_957() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_956() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_955() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_954() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_953() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_952() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_951() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_950() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_949() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_948() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_947() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_946() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_945() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_944() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_943() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_942() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_941() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_940() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_939() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_938() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_937() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_936() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_935() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_934() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_933() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_932() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_931() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_930() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_929() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_928() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_927() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_926() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_925() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_924() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_923() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_922() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_921() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_920() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_919() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_918() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_917() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_916() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_915() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_914() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_913() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_912() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_911() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_910() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_909() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_908() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_907() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_906() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_905() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_904() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_903() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_902() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_901() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_900() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_899() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_898() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_897() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_896() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_895() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_894() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_893() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_892() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_891() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_890() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_889() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_888() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_887() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_886() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_885() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_884() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_883() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_882() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_881() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_880() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_879() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_878() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_877() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_876() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_875() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_874() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_873() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_872() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_871() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_870() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_869() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_868() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_867() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_866() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_865() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_864() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_863() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_862() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_861() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_860() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_859() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_858() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_857() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_856() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_855() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_854() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_853() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_852() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_851() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_850() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_849() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_848() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_847() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_846() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_845() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_844() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_843() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_842() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_841() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_840() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_839() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_838() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_837() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_836() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_835() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_834() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_833() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_832() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_831() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_830() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_829() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_828() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_827() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_826() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_825() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_824() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_823() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_822() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_821() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_820() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_819() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_818() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_817() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_816() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_815() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_814() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_813() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_812() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_811() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_810() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_809() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_808() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_807() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_806() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_805() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_804() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_803() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_802() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_801() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_800() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_799() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_798() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_797() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_796() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_795() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_794() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_793() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_792() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_791() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_790() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_789() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_788() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_787() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_786() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_785() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_784() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_783() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_782() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_781() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_780() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_779() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_778() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_777() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_776() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_775() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_774() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_773() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_772() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_771() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_770() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_769() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_768() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_767() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_766() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_765() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_764() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_763() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_762() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_761() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_760() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_759() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_758() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_757() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_756() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_755() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_754() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_753() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_752() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_751() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_750() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_749() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_748() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_747() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_746() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_745() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_744() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_743() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_742() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_741() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_740() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_739() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_738() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_737() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_736() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_735() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_734() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_733() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_732() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_731() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_730() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_729() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_728() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_727() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_726() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_725() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_724() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_723() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_722() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_721() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_720() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_719() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_718() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_717() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_716() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_715() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_714() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_713() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_712() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_711() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_710() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_709() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_708() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_707() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_706() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_705() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_704() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_703() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_702() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_701() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_700() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_699() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_698() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_697() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_696() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_695() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_694() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_693() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_692() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_691() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_690() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_689() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_688() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_687() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_686() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_685() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_684() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_683() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_682() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_681() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_680() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_679() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_678() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_677() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_676() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_675() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_674() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_673() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_672() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_671() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_670() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_669() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_668() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_667() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_666() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_665() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_664() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_663() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_662() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_661() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_660() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_659() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_658() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_657() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_656() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_655() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_654() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_653() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_652() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_651() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_650() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_649() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_648() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_647() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_646() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_645() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_644() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_643() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_642() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_641() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_640() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_639() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_638() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_637() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_636() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_635() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_634() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_633() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_632() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_631() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_630() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_629() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_628() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_627() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_626() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_625() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_624() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_623() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_622() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_621() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_620() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_619() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_618() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_617() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_616() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_615() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_614() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_613() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_612() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_611() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_610() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_609() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_608() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_607() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_606() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_605() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_604() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_603() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_602() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_601() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_600() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_599() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_598() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_597() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_596() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_595() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_594() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_593() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_592() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_591() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_590() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_589() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_588() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_587() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_586() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_585() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_584() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_583() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_582() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_581() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_580() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_579() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_578() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_577() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_576() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_575() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_574() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_573() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_572() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_571() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_570() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_569() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_568() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_567() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_566() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_565() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_564() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_563() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_562() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_561() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_560() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_559() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_558() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_557() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_556() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_555() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_554() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_553() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_552() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_551() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_550() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_549() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_548() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_547() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_546() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_545() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_544() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_543() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_542() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_541() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_540() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_539() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_538() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_537() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_536() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_535() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_534() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_533() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_532() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_531() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_530() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_529() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_528() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_527() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_526() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_525() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_524() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_523() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_522() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_521() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_520() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_519() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_518() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_517() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_516() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_515() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_514() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_513() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_512() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_511() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_510() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_509() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_508() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_507() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_506() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_505() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_504() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_503() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_502() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_501() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_500() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_499() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_498() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_497() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_496() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_495() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_494() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_493() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_492() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_491() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_490() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_489() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_488() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_487() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_486() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_485() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_484() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_483() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_482() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_481() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_480() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_479() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_478() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_477() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_476() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_475() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_474() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_473() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_472() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_471() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_470() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_469() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_468() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_467() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_466() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_465() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_464() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_463() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_462() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_461() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_460() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_459() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_458() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_457() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_456() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_455() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_454() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_453() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_452() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_451() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_450() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_449() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_448() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_447() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_446() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_445() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_444() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_443() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_442() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_441() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_440() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_439() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_438() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_437() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_436() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_435() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_434() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_433() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_432() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_431() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_430() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_429() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_428() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_427() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_426() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_425() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_424() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_423() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_422() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_421() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_420() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_419() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_418() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_417() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_416() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_415() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_414() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_413() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_412() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_411() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_410() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_409() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_408() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_407() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_406() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_405() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_404() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_403() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_402() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_401() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_400() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_399() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_398() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_397() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_396() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_395() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_394() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_393() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_392() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_391() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_390() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_389() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_388() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_387() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_386() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_385() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_384() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_383() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_382() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_381() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_380() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_379() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_378() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_377() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_376() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_375() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_374() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_373() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_372() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_371() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_370() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_369() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_368() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_367() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_366() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_365() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_364() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_363() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_362() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_361() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_360() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_359() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_358() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_357() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_356() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_355() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_354() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_353() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_352() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_351() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_350() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_349() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_348() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_347() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_346() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_345() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_344() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_343() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_342() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_341() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_340() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_339() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_338() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_337() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_336() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_335() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_334() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_333() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_332() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_331() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_330() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_329() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_328() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_327() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_326() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_325() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_324() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_323() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_322() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_321() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_320() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_319() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_318() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_317() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_316() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_315() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_314() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_313() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_312() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_311() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_310() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_309() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_308() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_307() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_306() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_305() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_304() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_303() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_302() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_301() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_300() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_299() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_298() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_297() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_296() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_295() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_294() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_293() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_292() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_291() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_290() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_289() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_288() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_287() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_286() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_285() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_284() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_283() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_282() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_281() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_280() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_279() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_278() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_277() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_276() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_275() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_274() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_273() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_272() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_271() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_270() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_269() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_268() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_267() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_266() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_265() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_264() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_263() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_262() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_261() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_260() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_259() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_258() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_257() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_256() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_255() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_254() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_253() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_252() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_251() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_250() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_249() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_248() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_247() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_246() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_245() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_244() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_243() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_242() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_241() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_240() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_239() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_238() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_237() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_236() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_235() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_234() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_233() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_232() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_231() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_230() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_229() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_228() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_227() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_226() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_225() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_224() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_223() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_222() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_221() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_220() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_219() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_218() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_217() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_216() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_215() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_214() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_213() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_212() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_211() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_210() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_209() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_208() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_207() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_206() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_205() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_204() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_203() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_202() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_201() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_200() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_199() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_198() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_197() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_196() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_195() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_194() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_193() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_192() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_191() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_190() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_189() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_188() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_187() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_186() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_185() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_184() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_183() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_182() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_181() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_180() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_179() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_178() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_177() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_176() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_175() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_174() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_173() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_172() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_171() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_170() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_169() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_168() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_167() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_166() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_165() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_164() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_163() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_162() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_161() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_160() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_159() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_158() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_157() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_156() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_155() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_154() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_153() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_152() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_151() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_150() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_149() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_148() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_147() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_146() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_145() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_144() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_143() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_142() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_141() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_140() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_139() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_138() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_137() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_136() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_135() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_134() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_133() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_132() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_131() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_130() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_129() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_128() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_127() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_126() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_125() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_124() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_123() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_122() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_121() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_120() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_119() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_118() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_117() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_116() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_115() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_114() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_113() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_112() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_111() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_110() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_109() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_108() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_107() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_106() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_105() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_104() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_103() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_102() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_101() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_100() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_99() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_98() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_97() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_96() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_95() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_94() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_93() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_92() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_91() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_90() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_89() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_88() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_87() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_86() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_85() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_84() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_83() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_82() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_81() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_80() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_79() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_78() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_77() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_76() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_75() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_74() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_73() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_72() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_71() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_70() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_69() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_68() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_67() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_66() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_65() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_64() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_63() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_62() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_61() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_60() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_59() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_58() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_57() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_56() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_55() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_54() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_53() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_52() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_51() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_50() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_49() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_48() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_47() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_46() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_45() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_44() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_43() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_42() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_41() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_40() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_39() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_38() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_37() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_36() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_35() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_34() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_33() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_32() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_31() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_30() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_29() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_28() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_27() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_26() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_25() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_24() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_23() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_22() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_21() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_20() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_19() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_18() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_17() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_16() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_15() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_14() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_13() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_12() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_11() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_10() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_9() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_8() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_7() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_6() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_5() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_4() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_3() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_2() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_1() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField_0() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    public void testWildcardCollectionField() throws java.lang.Exception {
        java.util.Collection<com.google.gson.common.TestTypes.BagOfPrimitives> collection = new java.util.ArrayList<com.google.gson.common.TestTypes.BagOfPrimitives>();
        com.google.gson.common.TestTypes.BagOfPrimitives objA = new com.google.gson.common.TestTypes.BagOfPrimitives(3L, 1, true, "blah");
        com.google.gson.common.TestTypes.BagOfPrimitives objB = new com.google.gson.common.TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
        collection.add(objA);
        collection.add(objB);
        com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection target = new com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection(collection);
        java.lang.String json = gson.toJson(target);
        junit.framework.Assert.assertTrue(json.contains(objA.getExpectedJson()));
        junit.framework.Assert.assertTrue(json.contains(objB.getExpectedJson()));
        target = gson.fromJson(json, com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.ObjectWithWildcardCollection.class);
        java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
        junit.framework.Assert.assertEquals(2, deserializedCollection.size());
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objA));
        junit.framework.Assert.assertTrue(deserializedCollection.contains(objB));
    }

    static class HasArrayListField {
        java.util.ArrayList<java.lang.Long> longs = new java.util.ArrayList<java.lang.Long>();
    }

    @java.lang.SuppressWarnings("unchecked")
    private static int[] toIntArray(java.util.Collection collection) {
        int[] ints = new int[collection.size()];
        int i = 0;
        for (java.util.Iterator iterator = collection.iterator(); iterator.hasNext(); ++i) {
            java.lang.Object obj = iterator.next();
            if (obj instanceof java.lang.Integer) {
                ints[i] = ((java.lang.Integer) (obj)).intValue();
            } else if (obj instanceof java.lang.Long) {
                ints[i] = ((java.lang.Long) (obj)).intValue();
            }
        }
        return ints;
    }

    private static class ObjectWithWildcardCollection {
        private final java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> collection;

        public ObjectWithWildcardCollection(java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> collection) {
            this.collection = collection;
        }

        public java.util.Collection<? extends com.google.gson.common.TestTypes.BagOfPrimitives> getCollection() {
            return collection;
        }
    }

    private static class Entry {
        int value;

        Entry(int value) {
            this.value = value;
        }
    }

    public static junit.framework.Test suite() {
        junit.extensions.TestSetup setup = new junit.extensions.TestSetup(new junit.framework.TestSuite(com.google.gson.functional.CollectionTest_testWildcardCollectionField_1000.class) {}) {
            protected void setUp() {
                org.powerapi.jjoules.junit4.EnergyTest.beforeTest("com.google.gson.functional.CollectionTest", "testWildcardCollectionField");
            }

            protected void tearDown() {
                org.powerapi.jjoules.junit4.EnergyTest.afterTest();
            }
        };
        return setup;
    }
}